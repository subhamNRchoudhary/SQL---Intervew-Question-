**SQL Cheat Sheet** summarizing the commands you provided for querying, filtering, joining, and managing transactions in SQL.

---

### **Querying Data in SQL**

**`SELECT`**: Retrieve data from one or more tables
```sql
SELECT * FROM employees;
```

**`DISTINCT`**: Select unique values from a column
```sql
SELECT DISTINCT department FROM employees;
```

**`WHERE`**: Filter rows based on specified conditions
```sql
SELECT * FROM employees WHERE salary > 55000.00;
```

**`LIMIT`**: Limit the number of rows returned in the result set
```sql
SELECT * FROM employees LIMIT 3;
```

**`FETCH`**: Retrieve a specified number of rows
```sql
SELECT * FROM employees FETCH FIRST 3 ROWS ONLY;
```

---

### **Filtering Data in SQL**

**`LIKE`**: Match a pattern in a column
```sql
SELECT * FROM employees WHERE first_name LIKE 'J%';
```

**`IN`**: Match any value in a list
```sql
SELECT * FROM employees WHERE department IN ('HR', 'Finance');
```

**`BETWEEN`**: Match values within a specified range
```sql
SELECT * FROM employees WHERE salary BETWEEN 50000 AND 60000;
```

**`IS NULL`**: Match NULL values
```sql
SELECT * FROM employees WHERE department IS NULL;
```

---

### **SQL Operators**

**`AND`**: Combine multiple conditions in a WHERE clause
```sql
SELECT * FROM employees WHERE department = 'IT' AND salary > 60000;
```

**`OR`**: Specify multiple conditions where any one is true
```sql
SELECT * FROM employees WHERE department = 'HR' OR department = 'Finance';
```

**`NOT`**: Negate a condition
```sql
SELECT * FROM employees WHERE NOT department = 'IT';
```

---

### **Sorting & Grouping**

**`ORDER BY`**: Sort results in ascending or descending order
```sql
SELECT * FROM employees ORDER BY salary DESC;
```

**`GROUP BY`**: Group rows into summary rows
```sql
SELECT department, COUNT(*) AS employee_count FROM employees GROUP BY department;
```

---

### **Aggregation Functions in SQL**

**`COUNT`**: Count the number of rows
```sql
SELECT COUNT(*) FROM employees;
```

**`SUM`**: Calculate the sum of values in a column
```sql
SELECT SUM(salary) FROM employees;
```

**`AVG`**: Calculate the average value of a column
```sql
SELECT AVG(salary) FROM employees;
```

**`MIN`**: Find the minimum value
```sql
SELECT MIN(salary) FROM employees;
```

**`MAX`**: Find the maximum value
```sql
SELECT MAX(salary) FROM employees;
```

---

### **Joins in SQL**

**`INNER JOIN`**: Retrieve records with matching values in both tables
```sql
SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;
```

**`LEFT JOIN`**: Retrieve all records from the left table and the matched records from the right
```sql
SELECT * FROM employees LEFT JOIN departments ON employees.department_id = departments.department_id;
```

**`RIGHT JOIN`**: Retrieve all records from the right table and the matched records from the left
```sql
SELECT * FROM employees RIGHT JOIN departments ON employees.department_id = departments.department_id;
```

**`FULL OUTER JOIN`**: Retrieve all records where there is a match in either the left or right table
```sql
SELECT * FROM employees FULL OUTER JOIN departments ON employees.department_id = departments.department_id;
```

**`CROSS JOIN`**: Retrieve the Cartesian product of the two tables
```sql
SELECT * FROM employees CROSS JOIN departments;
```

---

### **Indexes & Transactions in SQL**

**`CREATE INDEX`**: Create an index on a table
```sql
CREATE INDEX idx_department ON employees(department);
```

**`DROP INDEX`**: Remove an index
```sql
DROP INDEX IF EXISTS idx_department;
```

**`BEGIN TRANSACTION`**: Start a new transaction
```sql
BEGIN TRANSACTION;
```

**`COMMIT`**: Save changes made during the current transaction
```sql
COMMIT;
```

**`ROLLBACK`**: Undo changes made during the current transaction
```sql
ROLLBACK;
```

---

This cheat sheet can be a quick reference for writing SQL queries efficiently. 
